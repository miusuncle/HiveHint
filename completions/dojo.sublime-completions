{
	"scope": "source.js - string",
	"completions": [
		{ "trigger": "pspublish", "contents": "topic.publish('${1:topic}', ${2:params...})" },
		{ "trigger": "pssubscribe", "contents": "topic.subscribe('${1:topic}', ${2:listener})" },

		{ "trigger": "lgclone", "contents": "lang.clone(${1:obj})" },
		{ "trigger": "lgdelegate", "contents": "lang.delegate(${1:obj}, ${2:props})" },
		{ "trigger": "lgexists", "contents": "lang.exists('${1:dotstr}'${3:, ${2:context}})" },
		{ "trigger": "lghitch", "contents": "lang.hitch(${1:scope}, ${2:method}${4:, ${3:params}})" },
		{ "trigger": "lgextend", "contents": "lang.extend(${1:target}, ${2:source})" },
		{ "trigger": "lgmixin", "contents": "lang.mixin(${1:target}, ${2:source})" },
		{ "trigger": "lgpartial", "contents": "lang.partial(${1:method}${3:, ${2:params}})" },
		{ "trigger": "lgreplace", "contents": "lang.replace(${1:tmpl}, ${2:map}${4:, ${3:pattern}})" },
		{ "trigger": "lgtrim", "contents": "lang.trim(${1:str})" },
		{ "trigger": "lgsetObject", "contents": "lang.setObject(${1:name}, ${2:value}${4:, ${3:context}})" },
		{ "trigger": "lggetObject", "contents": "lang.getObject('${1:dotstr}'${3:, ${2:create?}}${5:, ${4:context}})" },

		{ "trigger": "strescape", "contents": "string.escape(${1:str})" },
		{ "trigger": "strpad", "contents": "string.pad(${1:text}, ${2:size}${4:, ${3:ch}}${6:, ${5:end?}})" },
		{ "trigger": "strrep", "contents": "string.rep(${1:str}, ${2:num})" },
		{ "trigger": "strsubstitute", "contents": "string.substitute(${1:tmpl}, ${2:map}${4:, ${3:transform}}${6:, ${5:formatter}})" },
		{ "trigger": "strtrim", "contents": "string.trim(${1:str})" },

		{ "trigger": "apbefore", "contents": "aspect.before(${1:target}, '${2:methodName}', ${3:advisingFunction})" },
		{ "trigger": "aparound", "contents": "aspect.around(${1:target}, '${2:methodName}', ${3:advisingFactory})" },
		{ "trigger": "apafter", "contents": "aspect.after(${1:target}, '${2:methodName}', ${3:advisingFunction}, ${4:receiveArguments})" },

		{ "trigger": "aryindexOf", "contents": "array.indexOf(${1:a}, ${2:s})" },
		{ "trigger": "arylastIndexOf", "contents": "array.lastIndexOf(${1:a}, ${2:s})" },
		{ "trigger": "aryforEach", "contents": "array.forEach(${1:a}, ${2:f}${4:, ${3:o}})" },
		{ "trigger": "aryfilter", "contents": "array.filter(${1:a}, ${2:f}${4:, ${3:o}})" },
		{ "trigger": "arymap", "contents": "array.map(${1:a}, ${2:f}${4:, ${3:o}})" },
		{ "trigger": "arysome", "contents": "array.some(${1:a}, ${2:f}${4:, ${3:o}})" },
		{ "trigger": "aryevery", "contents": "array.every(${1:a}, ${2:f}${4:, ${3:o}})" },

		{ "trigger": "dfbuildLambda", "contents": "df.buildLambda(${1:s})" },
		{ "trigger": "dfclearLambdaCache", "contents": "df.clearLambdaCache()" },
		{ "trigger": "dfevery", "contents": "df.every(${1:a}, ${2:f}${4:, ${3:o}})" },
		{ "trigger": "dfeveryRev", "contents": "df.everyRev(${1:a}, ${2:f}${4:, ${3:o}})" },
		{ "trigger": "dffilter", "contents": "df.filter(${1:a}, ${2:f}${4:, ${3:o}})" },
		{ "trigger": "dffilterIn", "contents": "df.filterIn(${1:obj}, ${2:f}${4:, ${3:o}})" },
		{ "trigger": "dffilterRev", "contents": "df.filterRev(${1:a}, ${2:f}${4:, ${3:o}})" },
		{ "trigger": "dffoldl", "contents": "df.foldl(${1:a}, ${2:f}, ${3:z}${5:, ${4:o}})" },
		{ "trigger": "dffoldl1", "contents": "df.foldl1(${1:a}, ${2:f}${4:, ${3:o}})" },
		{ "trigger": "dffoldr", "contents": "df.foldr(${1:a}, ${2:f}, ${3:z}${5:, ${4:o}})" },
		{ "trigger": "dffoldr1", "contents": "df.foldr1(${1:a}, ${2:f}${4:, ${3:o}})" },
		{ "trigger": "dfforEach", "contents": "df.forEach(${1:a}, ${2:f}${4:, ${3:o}})" },
		{ "trigger": "dfforEachRev", "contents": "df.forEachRev(${1:a}, ${2:f}${4:, ${3:o}})" },
		{ "trigger": "dfforIn", "contents": "df.forIn(${1:obj}, ${2:f}${4:, ${3:o}})" },
		{ "trigger": "dfkeys", "contents": "df.keys(${1:obj})" },
		{ "trigger": "dflambda", "contents": "df.lambda(${1:s})" },
		{ "trigger": "dfmap", "contents": "df.map(${1:a}, ${2:f}${4:, ${3:o}})" },
		{ "trigger": "dfmapIn", "contents": "df.mapIn(${1:obj}, ${2:f}${4:, ${3:o}})" },
		{ "trigger": "dfmapRev", "contents": "df.mapRev(${1:a}, ${2:f}${4:, ${3:o}})" },
		{ "trigger": "dfrawLambda", "contents": "df.rawLambda(${1:s})" },
		{ "trigger": "dfreduce", "contents": "df.reduce(${1:a}, ${2:f}, ${3:z})" },
		{ "trigger": "dfreduceRight", "contents": "df.reduceRight(${1:a}, ${2:f}, ${3:z})" },
		{ "trigger": "dfrepeat", "contents": "df.repeat(${1:n}, ${2:f}, ${3:z})${5:, ${4:o}}" },
		{ "trigger": "dfscanl", "contents": "df.scanl(${1:a}, ${2:f}, ${3:z}${5:, ${4:o}})" },
		{ "trigger": "dfscanl1", "contents": "df.scanl1(${1:a}, ${2:f}${4:, ${3:o}})" },
		{ "trigger": "dfscanr", "contents": "df.scanr(${1:a}, ${2:f}, ${3:z}${5:, ${4:o}})" },
		{ "trigger": "dfscanr1", "contents": "df.scanr1(${1:a}, ${2:f}${4:, ${3:o}})" },
		{ "trigger": "dfsome", "contents": "df.some(${1:a}, ${2:f}${4:, ${3:o}})" },
		{ "trigger": "dfsomeRev", "contents": "df.someRev(${1:a}, ${2:f}${4:, ${3:o}})" },
		{ "trigger": "dfunfold", "contents": "df.unfold(${1:pr}, ${2:f}, ${3:g}, ${4:z}${6:, ${5:o}})" },
		{ "trigger": "dfuntil", "contents": "df.until(${1:pr}, ${2:f}, ${3:z}${5:, ${4:o}})" },
		{ "trigger": "dfvalues", "contents": "df.values(${1:obj})" }
	]
}
